import numpy as np


def get_recommend_candidates(data: list, base: list) -> list:
  recommend_people_max = 3

  # 総当りで類似度を計算
  results = map(
          lambda i: {
              'index': i['index'],
              # ここでクエリと各文章のコサイン類似度を計算
              'similarity': cosine_similarity(i['embedding'], base)
              },
          data
  )
  # コサイン類似度で降順（大きい順）にソート
  results = sorted(results, key=lambda i: i['similarity'], reverse=True)
  
  recommend_people_max = min(recommend_people_max, len(results)) # 母数が少ないときの処理
    
  return [ results[i] for i in range(recommend_people_max) ]

def cosine_similarity(target :list, base: list) -> float:
  target = np.array(target)
  base = np.array(base)
  
  # cos = A・B / |A||B|
  return np.dot(target, base) / (np.linalg.norm(target) * np.linalg.norm(base))


if __name__ == '__main__':
  
  # 教授をベクトル化した結果
  base = [0.38716477155685425, -0.552068293094635, -0.11071239411830902, 0.0488138273358345, -0.2342107743024826, 0.017371628433465958, -0.06315326690673828, 0.1326397806406021, -0.23636169731616974, -0.6309351325035095]
  
  # 1-index
  occupations = [
    "医師", "弁護士", "科学者", "ソフトウェアエンジニア", "料理人",
    "建築家", "デザイナー", "マーケター", "警察官", "ファイナンシャルアナリスト",
  ]

  # 上記の職業でベクトル化した結果
  data = [{'index': 1, 'embedding': [0.13985677, -0.59347, -0.31954727, -0.18530583, -0.41658714, 0.16530122, 0.07093739, -0.07835138, -0.34955418, -0.3969335]}, {'index': 1, 'embedding': [-0.18856772780418396, 0.14608319103717804, -0.3180660307407379, 0.5093600749969482, 0.12404575943946838, 0.31056877970695496, -0.4078060984611511, -0.17652665078639984, -0.4287075996398926, -0.29898208379745483]}, {'index': 2, 'embedding': [0.16336844861507416, 0.35958215594291687, -0.0788654163479805, 0.3304136097431183, 0.030409449711441994, -0.08254212141036987, -0.7020063400268555, 0.4326261281967163, 0.1975618451833725, -0.04326261207461357]}, {'index': 3, 'embedding': [0.4574376940727234, -0.37652871012687683, 0.10862334072589874, 0.3528597950935364, -0.021902788430452347, -0.1421341449022293, 0.1552969515323639, -0.08972444385290146, -0.2762981653213501, -0.6192556619644165]}, {'index': 4, 'embedding': [0.19139155745506287, 0.4484030604362488, -0.09778237342834473, -0.3119826316833496, 0.30449965596199036, -0.3030606210231781, 0.1800231784582138, 0.3289632201194763, -0.42652973532676697, -0.3850855529308319]}, {'index': 5, 'embedding': [-0.05741632729768753, -0.30120399594306946, -0.11974003911018372, -0.5020793676376343, 0.24754998087882996, -0.2663070857524872, -0.3247593939304352, 0.23838955163955688, -0.1700133979320526, -0.5622765421867371]}, {'index': 6, 'embedding': [0.14857256412506104, 0.2442379742860794, 0.41460561752319336, 0.37134820222854614, -0.19948320090770721, -0.1304377168416977, 0.0620577409863472, -0.46984198689460754, -0.565341055393219, -0.08634843677282333]}, {'index': 7, 'embedding': [0.2387382686138153, 0.6247963905334473, -0.16695420444011688, 0.1668291538953781, 0.09379449486732483, -0.22248055040836334, -0.10655055195093155, 0.16345255076885223, -0.5602657794952393, -0.29438966512680054]}, {'index': 8, 'embedding': [0.16053396463394165, -0.1113046184182167, -0.49596381187438965, 0.14776785671710968, -0.09782040119171143, -0.09885764867067337, 0.26792895793914795, 0.45798459649086, -0.12989528477191925, -0.613412082195282]}, {'index': 9, 'embedding': [0.04487428441643715, 0.0038052313029766083, -0.36857596039772034, 0.14612089097499847, -0.347815603017807, -0.07681327313184738, -0.6432512998580933, 0.07944823801517487, 0.006547493394464254, -0.5420047044754028]}, {'index': 10, 'embedding': [-0.04043388366699219, 0.3185831904411316, 0.14742110669612885, -0.39661428332328796, 0.2323475331068039, -0.1073581725358963, 0.10936568677425385, 0.5477885603904724, -0.4008038640022278, -0.423846572637558]}]
  
  print("教授のマッチング結果")
  for sample in get_recommend_people(data,base):
    print(occupations[sample['index']-1])